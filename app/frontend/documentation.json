{
    "pipes": [],
    "interfaces": [
        {
            "name": "CurriculumModel",
            "id": "interface-CurriculumModel-8045c75139f99189717308ccfd893af85757765eac28356f236f8a136fc408c2fc83fa38912b3d81ce7684d1d7739cb0cb3e7ae6ec81646d321361c03b2d0c0c",
            "file": "src/app/models/curriculum.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkillsModel } from \"./skills.model\";\nimport { UsersModel } from \"./users.model\";\n\nexport interface CurriculumModel {\n  id?: number\n  name: string;\n  email: string\n  vacancy: string;\n  cpf: string;\n  birthday: string;\n  phone: string;\n  education: string;\n  idskill: SkillsModel;\n}\n",
            "properties": [
                {
                    "name": "birthday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "education",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "idskill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkillsModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "vacancy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "LoginModel",
            "id": "interface-LoginModel-a76695139c7feecf712bd720f254cb289f626b6b289827e98bf767809aba415469957696d3ba276007835a2a20ea7f876735c149f5b2341014e65cb3cdaf18c7",
            "file": "src/app/models/login.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginModel {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "SkillsModel",
            "id": "interface-SkillsModel-cf86b82019eda9ff63589ee14613a80d373c5b83c0444bf034764950f5b1aff1cd7da3f8c159b73e2db625372452d0e3cfca199393e8f098da29751a57d00284",
            "file": "src/app/models/skills.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SkillsModel {\n  nameSkill: string;\n}\n",
            "properties": [
                {
                    "name": "nameSkill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "UsersModel",
            "id": "interface-UsersModel-fdaf85b197873e6f0d49e51fc72055a9a95f58a61726e11eb3bac999f9e2f330c9460788f18dec708096d8fe162ba6c60ef510b6fda1e80b8124058fb5a1e725",
            "file": "src/app/models/users.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkillsModel } from \"./skills.model\";\n\nexport interface UsersModel {\n  id?: number;\n  name: string;\n  email: string;\n  cpf: string;\n  birthday: string;\n  phone: string;\n  password: string;\n  education:\n    | 'FUNDAMENTAL_COMPLETO'\n    | 'MEDIO_INCOMPLETO'\n    | 'MEDIO_COMPLETO'\n    | 'SUPERIOR_INCOMPLETO'\n    | 'SUPERIOR_COMPLETO'\n    | 'MESTRADO'\n    | 'DOUTORADO';\n  idskill: number\n  skills: SkillsModel;\n  admin?: boolean;\n}\n",
            "properties": [
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "birthday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "education",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"FUNDAMENTAL_COMPLETO\" | \"MEDIO_INCOMPLETO\" | \"MEDIO_COMPLETO\" | \"SUPERIOR_INCOMPLETO\" | \"SUPERIOR_COMPLETO\" | \"MESTRADO\" | \"DOUTORADO\"",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "idskill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "skills",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkillsModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-d45894ca09e2dde30bcec6c5d4f2d739b610bc787abf5e3aecfa2d9096e2d3e0278b3a673d3a0d64444fc9fa57999a5674ca5678f4b0d1657bc9e0cfab2d2555",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASEURL",
                    "defaultValue": "`${environment.BASEURL}/user`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loggedInUser$",
                    "defaultValue": "this.loggedInUserSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loggedInUserSubject",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "newUserCredentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUserCredentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLoggedInUser",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção modelo injectable que recebe uma mensagem e retornar um snackbar\n",
                    "description": "<p>Função modelo injectable que recebe uma mensagem e retornar um snackbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 565,
                                "end": 568,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "msg"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 559,
                                "end": 564,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mensagem para passar via injectable</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { MatSnackBar } from '@angular/material/snack-bar'\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private BASEURL = `${environment.BASEURL}/user`;\n  constructor(private http: HttpClient, private snackbar: MatSnackBar) {}\n\n   /**\n   * Função modelo injectable que recebe uma mensagem e retornar um snackbar\n   * @param msg Mensagem para passar via injectable\n   */\n   showMessage(msg: string): void {\n    this.snackbar.open(msg, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top'\n    })\n  }\n\n  login(credentials: any): Observable<any> {\n    return this.http.get(`${this.BASEURL}`, { params: credentials });\n  }\n\n  private loggedInUserSubject = new BehaviorSubject<string>('');\n\n  loggedInUser$ = this.loggedInUserSubject.asObservable();\n\n  setLoggedInUser(username: string) {\n    this.loggedInUserSubject.next(username);\n  }\n\n  register(newUserCredentials: any): Observable<any> {\n    return this.http.post(`${this.BASEURL}`,  newUserCredentials);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CurriculoService",
            "id": "injectable-CurriculoService-5e183ce55db40e79c60951845b26cc6525039b6737488dde42528d901a66c9a54dd89d2d13931da862062511617eafebd82cbdc265b16359c0c5e8f82afff2e2",
            "file": "src/app/services/curriculo.service.ts",
            "properties": [
                {
                    "name": "BASEURL",
                    "defaultValue": "`${environment.BASEURL}/curriculo`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "cv",
                            "type": "CurriculumModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CurriculumModel>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção que cria um curriculo atraves de um modelo e um observable\n",
                    "description": "<p>Função que cria um curriculo atraves de um modelo e um observable</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 948,
                                "end": 950,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cv"
                            },
                            "type": "CurriculumModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 942,
                                "end": 947,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Objeto de curriculo</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 977,
                                "end": 984,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observable de curriculo</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CurriculumModel>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção que apaga um curriculo\n",
                    "description": "<p>Função que apaga um curriculo</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2122,
                                "end": 2124,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2116,
                                "end": 2121,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identificador</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2145,
                                "end": 2152,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observavel para apagar um curriculo</p>\n"
                        }
                    ]
                },
                {
                    "name": "read",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CurriculumModel[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção com verbo get para pegar curriculos do backend\n",
                    "description": "<p>Função com verbo get para pegar curriculos do backend</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1227,
                                "end": 1234,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retona uma lista de curriculos</p>\n"
                        }
                    ]
                },
                {
                    "name": "readById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CurriculumModel>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção com verbo get por id para selecionar um curriculo especifico\n",
                    "description": "<p>Função com verbo get por id para selecionar um curriculo especifico</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1469,
                                "end": 1471,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1463,
                                "end": 1468,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identificador do curriculo</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1505,
                                "end": 1512,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observavel de curriculo</p>\n"
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção modelo injectable que recebe uma mensagem e retornar um snackbar\n",
                    "description": "<p>Função modelo injectable que recebe uma mensagem e retornar um snackbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 630,
                                "end": 633,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "msg"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 624,
                                "end": 629,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mensagem para passar via injectable</p>\n"
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "cv",
                            "type": "CurriculumModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CurriculumModel>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção que realiza a modificação dos dados de um curriculo\n",
                    "description": "<p>Função que realiza a modificação dos dados de um curriculo</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1782,
                                "end": 1784,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cv"
                            },
                            "type": "CurriculumModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1776,
                                "end": 1781,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Dados a serem enviados para atualizacao</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1831,
                                "end": 1838,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observavel para atualizacao de dados do curriculo</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CurriculumModel } from '../models/curriculum.model';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurriculoService {\n\n  public readonly BASEURL = `${environment.BASEURL}/curriculo`\n\n  constructor(private snackbar: MatSnackBar, private http: HttpClient) { }\n\n  /**\n   * Função modelo injectable que recebe uma mensagem e retornar um snackbar\n   * @param msg Mensagem para passar via injectable\n   */\n    showMessage(msg: string): void {\n      this.snackbar.open(msg, 'X', {\n        duration: 3000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      })\n    }\n\n  /**\n   * Função que cria um curriculo atraves de um modelo e um observable\n   * @param cv Objeto de curriculo\n   * @returns Retorna um observable de curriculo\n   */\n  create(cv: CurriculumModel): Observable<CurriculumModel> {\n    return this.http.post<CurriculumModel>(this.BASEURL, cv);\n  }\n\n    /**\n   * Função com verbo get para pegar curriculos do backend\n   * @returns Retona uma lista de curriculos\n   */\n  read(): Observable<CurriculumModel[]> {\n    return this.http.get<CurriculumModel[]>(this.BASEURL);\n  }\n\n  /**\n   * Função com verbo get por id para selecionar um curriculo especifico\n   * @param id identificador do curriculo\n   * @returns Retorna um observavel de curriculo\n   */\n  readById(id: number): Observable<CurriculumModel> {\n    const url = `${this.BASEURL}/${id}`\n    return this.http.get<CurriculumModel>(url)\n  }\n\n  /**\n   * Função que realiza a modificação dos dados de um curriculo\n   * @param cv Dados a serem enviados para atualizacao\n   * @returns Retorna um observavel para atualizacao de dados do curriculo\n   */\n  update(cv: CurriculumModel): Observable<CurriculumModel> {\n    const url = `${this.BASEURL}/${cv.id}`;\n    return this.http.patch<CurriculumModel>(url, cv)\n  }\n\n  /**\n   * Função que apaga um curriculo\n   * @param id identificador\n   * @returns Retorna um observavel para apagar um curriculo\n   */\n  delete(id: number): Observable<CurriculumModel> {\n    const url = `${this.BASEURL}/${id}`;\n    return this.http.delete<CurriculumModel>(url)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SkillsService",
            "id": "injectable-SkillsService-3f1b551d53d9d375a89aab2e5012d9f6bae392188c58e2a5883ca9493f44275b604581e4983745638724982a9f3f1e1e0b11be728edc891613d090b1fd71de4f",
            "file": "src/app/services/skills.service.ts",
            "properties": [
                {
                    "name": "BASEURL",
                    "defaultValue": "`${environment.BASEURL}/skills`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "skills",
                            "type": "SkillsModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SkillsModel>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção que cria um usuário atraves de um observable\n",
                    "description": "<p>Função que cria um usuário atraves de um observable</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 906,
                                "end": 912,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "skills"
                            },
                            "type": "SkillsModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 900,
                                "end": 905,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Onjeto de skills</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 936,
                                "end": 943,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observable modelo skills</p>\n"
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção modelo injectable que recebe uma mensagem e retornar um snackbar\n",
                    "description": "<p>Função modelo injectable que recebe uma mensagem e retornar um snackbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 616,
                                "end": 619,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "msg"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 610,
                                "end": 615,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mensagem para passar via injectable</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SkillsModel } from '../models/skills.model';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SkillsService {\n\n  constructor(private snackbar: MatSnackBar, private http: HttpClient) { }\n\n  public readonly BASEURL = `${environment.BASEURL}/skills`\n\n  /**\n   * Função modelo injectable que recebe uma mensagem e retornar um snackbar\n   * @param msg Mensagem para passar via injectable\n   */\n  showMessage(msg: string): void {\n    this.snackbar.open(msg, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top'\n    })\n  }\n\n  /**\n   * Função que cria um usuário atraves de um observable\n   * @param skills Onjeto de skills\n   * @returns Retorna um observable modelo skills\n   */\n  create(skills: SkillsModel): Observable<SkillsModel> {\n    return this.http.post<SkillsModel>(this.BASEURL, skills);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-f4dc242c5cb6be000821c286d86924ad80b859edc9dff23652d431cdd4ef9d2e0e7a5a4e706323a4790e45c5abda64b95345ceadd005753b1cffeb7060bd4bde",
            "file": "src/app/services/users.service.ts",
            "properties": [
                {
                    "name": "BASEURL",
                    "defaultValue": "`${environment.BASEURL}/user`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "user",
                            "type": "UsersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UsersModel>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção que cria um usuário atraves de um observable\n",
                    "description": "<p>Função que cria um usuário atraves de um observable</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 899,
                                "end": 903,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "user"
                            },
                            "type": "UsersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 893,
                                "end": 898,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Objeto usuário</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 925,
                                "end": 932,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observable modelo users</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UsersModel>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeleta usuário\n",
                    "description": "<p>Deleta usuário</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1961,
                                "end": 1963,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1955,
                                "end": 1960,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identificador de usuario</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1995,
                                "end": 2002,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observable passando id para deletar</p>\n"
                        }
                    ]
                },
                {
                    "name": "read",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UsersModel[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção com verbo get para pegar usuários do backend\n",
                    "description": "<p>Função com verbo get para pegar usuários do backend</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1160,
                                "end": 1167,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retona uma lista de usuários</p>\n"
                        }
                    ]
                },
                {
                    "name": "readById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UsersModel>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFuncção que busca um único usuário através do ID\n",
                    "description": "<p>Funcção que busca um único usuário através do ID</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1367,
                                "end": 1369,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1361,
                                "end": 1366,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Identificador de usuário</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1399,
                                "end": 1406,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um único usuário</p>\n"
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunção modelo injectable que recebe uma mensagem e retornar um snackbar\n",
                    "description": "<p>Função modelo injectable que recebe uma mensagem e retornar um snackbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 609,
                                "end": 612,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "msg"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 603,
                                "end": 608,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mensagem para passar via injectable</p>\n"
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "UsersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UsersModel>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAtualiza o usuário\n",
                    "description": "<p>Atualiza o usuário</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1617,
                                "end": 1619,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1611,
                                "end": 1616,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identificador de usuario</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1657,
                                "end": 1661,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "UsersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1651,
                                "end": 1656,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Dados a serem alterados</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1692,
                                "end": 1699,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Retorna um observable passando os dados para o backend</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport { UsersModel } from '../models/users.model';\nimport { environment } from 'src/environments/environment.development';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  public readonly BASEURL = `${environment.BASEURL}/user`\n\n  constructor(private snackbar: MatSnackBar, private http: HttpClient) { }\n\n  /**\n   * Função modelo injectable que recebe uma mensagem e retornar um snackbar\n   * @param msg Mensagem para passar via injectable\n   */\n  showMessage(msg: string): void {\n    this.snackbar.open(msg, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top'\n    })\n  }\n\n  /**\n   * Função que cria um usuário atraves de um observable\n   * @param user Objeto usuário\n   * @returns Retorna um observable modelo users\n   */\n  create(user: UsersModel): Observable<UsersModel> {\n    return this.http.post<UsersModel>(this.BASEURL, user);\n  }\n\n  /**\n   * Função com verbo get para pegar usuários do backend\n   * @returns Retona uma lista de usuários\n   */\n  read(): Observable<UsersModel[]> {\n    return this.http.get<UsersModel[]>(this.BASEURL);\n  }\n\n  /**\n * Funcção que busca um único usuário através do ID\n * @param id Identificador de usuário\n * @returns Retorna um único usuário\n */\n  readById(id: number): Observable<UsersModel> {\n    const url = `${this.BASEURL}/${id}`;\n    return this.http.get<UsersModel>(url);\n  }\n\n\n  /**\n   * Atualiza o usuário\n   * @param id identificador de usuario\n   * @param data Dados a serem alterados\n   * @returns Retorna um observable passando os dados para o backend\n   */\n  update(id: number, data: UsersModel): Observable<UsersModel> {\n    const url = `${this.BASEURL}/${id}`;\n    return this.http.patch<UsersModel>(url, data);\n  }\n\n  /**\n   * Deleta usuário\n   * @param id identificador de usuario\n   * @returns Retorna um observable passando id para deletar\n   */\n  delete(id: number): Observable<UsersModel> {\n    const url = `${this.BASEURL}/${id}`;\n    return this.http.delete<UsersModel>(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3c0b6b9fb5a576152bdcc218ebcdf6bc8135d4e57422d9f52733e41301faeb101c40a763359e5d88ba3ba92846185aa313db0bd40526c5140ab87a3c5404dd80",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "CvcrudComponent",
            "id": "component-CvcrudComponent-72d90277ca62487b95dc36dd2ef2a51ece877c04b95a75e0fa50e5e83375d6d156420d16d6380d981a7abaa8a3766038787b8a586bf40a5aa6bfc9a96dac80fc",
            "file": "src/app/template/cvcrud/cvcrud.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cvcrud",
            "styleUrls": [
                "./cvcrud.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cvcrud.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToCreateCV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-cvcrud',\n  templateUrl: './cvcrud.component.html',\n  styleUrls: ['./cvcrud.component.css']\n})\nexport class CvcrudComponent {\n  constructor(private router: Router) {}\n\n  navigateToCreateCV(): void {\n    this.router.navigate(['readcv/newcv'])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cvcrud.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<div class=\"crud\">\n  <h2>Curriculos</h2>\n  <button class=\"createbtn\" mat-raised-button (click)=\"navigateToCreateCV()\" color=\"primary\">Criar Curriculo</button>\n  <app-readcv></app-readcv>\n</div>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-13edf1d3f5695c6b8ea965787a6d8e497a610b7362e9d7a51f9042caa99c43b8dfb22c442c36d416bd789c3d1e3f3be7b919fffc6fd25ebc167dd70b9cec039b",
            "file": "src/app/views/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dash .title {\n  font-size: 3rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.dash .subtitle {\n  font-size: 1.1rem;\n  margin-left: 5px;\n}\n",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-nav></app-nav>\nAqui vem os graficos\n"
        },
        {
            "name": "DeletecvComponent",
            "id": "component-DeletecvComponent-88c478c2aac3c2f020749f86639f97dec9299677287dfcaae16e384d3cf1088f12ff44dae30ee589e116bc48310a21fe1e8ee43c3a78e12c06e9948cd2f4b8c8",
            "file": "src/app/components/cv/deletecv/deletecv.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deletecv",
            "styleUrls": [
                "./deletecv.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./deletecv.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurriculumModel",
                    "optional": false,
                    "description": "<p>Modelo de curriculo</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nModelo de curriculo\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInteração com o botão cancelar\n",
                    "description": "<p>Interação com o botão cancelar</p>\n"
                },
                {
                    "name": "deleteCv",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeleta um curriculo\n",
                    "description": "<p>Deleta um curriculo</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CurriculumModel } from 'src/app/models/curriculum.model';\nimport { CurriculoService } from 'src/app/services/curriculo.service';\n\n@Component({\n  selector: 'app-deletecv',\n  templateUrl: './deletecv.component.html',\n  styleUrls: ['./deletecv.component.css']\n})\nexport class DeletecvComponent {\n  /**\n   * Modelo de curriculo\n   */\n  cv!: CurriculumModel;\n\n  constructor(private cvService: CurriculoService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam !== null) {\n      const id = +idParam;\n      if (!isNaN(id)) {\n        this.cvService.readById(id).subscribe(user => {\n          this.cv = user;\n        });\n      } else {\n        this.cvService.showMessage('id invalido')\n        return\n      }\n    } else {\n      this.cvService.showMessage('id null')\n      return\n    }\n  }\n\n  /**\n   * Interação com o botão cancelar\n   */\n  cancelar(): void {\n    this.router.navigate(['/readuser'])\n  }\n\n  /**\n   * Deleta um curriculo\n   */\n  deleteCv(): void {\n    if (this.cv && this.cv.id !== undefined) {\n      this.cvService.delete(this.cv.id).subscribe(() => {\n        this.cvService.showMessage('Currículo apagado com sucesso');\n        this.router.navigate(['/readcv']);\n      });\n    } else {\n      this.cvService.showMessage('Não foi possível apagar o currículo');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".deletecv {\n  padding: 20px;\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.deletecv form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n",
                    "styleUrl": "./deletecv.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<mat-card class=\"deletecv\">\n  <mat-card-title class=\"title\">Deseja apagar currículo?</mat-card-title>\n  <form class=\"forms\" action=\"\">\n    <mat-form-field>\n      <mat-label>Nome</mat-label>\n      <input matInput placeholder=\"Nome\" [value]=\"cv.name\" name=\"name\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Email</mat-label>\n      <input matInput placeholder=\"Email\" [value]=\"cv.email\" name=\"email\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Vaga</mat-label>\n      <input matInput placeholder=\"Vaga\" [value]=\"cv.vacancy\" name=\"vacancy\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Aniversário</mat-label>\n      <input matInput [matDatepicker]=\"picker\" [value]=\"cv.birthday\" name=\"birthday\" disabled>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Telefone</mat-label>\n      <input matInput placeholder=\"Telefone\" [value]=\"cv.phone\" name=\"phone\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Educação</mat-label>\n      <mat-select [formControlName]=\"'education'\" placeholder=\"Educação\" [disabled]=\"true\">\n        <mat-option [value]=\"'FUNDAMENTAL_COMPLETO'\">Fundamental Completo</mat-option>\n        <mat-option [value]=\"'MEDIO_INCOMPLETO'\">Médio Incompleto</mat-option>\n        <mat-option [value]=\"'MEDIO_COMPLETO'\">Médio Completo</mat-option>\n        <mat-option [value]=\"'SUPERIOR_INCOMPLETO'\">Superior Incompleto</mat-option>\n        <mat-option [value]=\"'SUPERIOR_COMPLETO'\">Superior Completo</mat-option>\n        <mat-option [value]=\"'MESTRADO'\">Mestrado</mat-option>\n        <mat-option [value]=\"'DOUTORADO'\">Doutorado</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </form>\n  <div class=\"btn\">\n    <button mat-raised-button (click)=\"deleteCv()\" color=\"warn\">Apagar</button>\n    <button mat-raised-button (click)=\"cancelar()\">Cancelar</button>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "DeleteuserComponent",
            "id": "component-DeleteuserComponent-7918f4103dfde97469354ec814906c07d6d1951f66b128de3b6157cf0653e8b807221f4f1d309dfad1b80e4aa6ec45a6e4114a3e5facf691cdc662a9f67a86fa",
            "file": "src/app/components/user/deleteuser/deleteuser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deleteuser",
            "styleUrls": [
                "./deleteuser.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./deleteuser.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UsersModel } from 'src/app/models/users.model';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-deleteuser',\n  templateUrl: './deleteuser.component.html',\n  styleUrls: ['./deleteuser.component.css']\n})\nexport class DeleteuserComponent {\n  user!: UsersModel;\n\n  constructor(private userService: UsersService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam !== null) {\n      const id = +idParam;\n      if (!isNaN(id)) {\n        this.userService.readById(id).subscribe(user => {\n          this.user = user;\n        });\n      } else {\n        this.userService.showMessage('id invalido')\n        return\n      }\n    } else {\n      this.userService.showMessage('id null')\n      return\n    }\n  }\n\n  cancelar(): void {\n    this.router.navigate(['/readuser'])\n  }\n  deleteUser(): void {\n    if (this.user && this.user.id !== undefined) {\n      this.userService.delete(this.user.id).subscribe(() => {\n        this.userService.showMessage('Currículo apagado com sucesso');\n        this.router.navigate(['/readuser']);\n      });\n    } else {\n      this.userService.showMessage('Não foi possível apagar o currículo');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".deleteuser {\n  padding: 20px;\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.deleteuser form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n",
                    "styleUrl": "./deleteuser.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<mat-card class=\"deleteuser\">\n  <mat-card-title class=\"title\">Deseja apagar usuário?</mat-card-title>\n  <form class=\"forms\" action=\"\">\n    <mat-form-field>\n      <mat-label>Nome</mat-label>\n      <input matInput placeholder=\"Nome\" [value]=\"user.name\" name=\"name\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Email</mat-label>\n      <input matInput placeholder=\"Email\" [value]=\"user.email\" name=\"email\" disabled>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Admin</mat-label>\n      <input matInput placeholder=\"Admin\" [value]=\"user.admin ? 'Sim' : 'Não'\" name=\"admin\" disabled>\n    </mat-form-field>\n  </form>\n  <div class=\"btn\">\n    <button mat-raised-button (click)=\"deleteUser()\" color=\"warn\">Apagar</button>\n    <button mat-raised-button (click)=\"cancelar()\">Cancelar</button>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-931ceba333e2bd7ce0ea040e07636d026c7781a645cf22831b1089e69253ccb176cdb96d32d34857810850b42f3fe6d0ff75f01dfa05c2298986d17ff80e8b25",
            "file": "src/app/template/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".footer {\n  bottom: 0;\n  background-color: #262626;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-center;\n}\n.footer span {\n  font-size: 1rem;\n  font-weight: 300;\n  color: #fff;\n}\n",
                    "styleUrl": "./footer.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar class=\"footer\">\n  <span>\n    Desafio Diamond Solutions\n  </span>\n</mat-toolbar>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-538d4fd77b4bdcfa8d7d9bce3aea362ebbeb18b496f8ccb0ea177403f105cfca069cd7e745a410eea2fd1afce5d67f2f9d91b582cdc000949ec45042b23cea57",
            "file": "src/app/template/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "condition",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n  condition: boolean = true;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header{\n  display: flex;\n  align-items: center;\n  background-color: #262626;\n  justify-content: center;\n}\n\n.header div {\n  display: flex;\n}\n\n.header h2 {\n  color: #ccc;\n  font-weight: bold;\n  font-size: 25px;\n  margin-right: 20px;\n}\n\n.header div span {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.header a {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n}\n.header .logo{\n  max-height: 60px;\n  width: auto;\n  margin-right: 4rem;\n  background-color: white;\n  padding: 5px;\n  border-radius: 50%;\n  width: 50px;\n}\n.header .title-group{\n  padding-right: 30px;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar class=\"header mat-elevation-z3\">\n  <div>\n    <span>\n      <a href=\"/\">\n        <img routerLink=\"/\" class=\"logo\" src=\"../../../assets/logo.png\" alt=\"logo\">\n      </a>\n      <h2>Cadastro de curriculos</h2>\n    </span>\n    <span  [ngClass]=\"{'hide-element': condition}\" class=\"title-group\">\n      <a href=\"/login\">\n        <i class=\"material-icons\">\n          login\n        </i>\n        Acessar conta\n      </a>\n    </span>\n  </div>\n</mat-toolbar>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-cea70ee77e8b338df4ce8fe86128caebe07dfc6a5b13cb4852ebf3c29edd3039efd2d81f0b014304c13a3486e03892aae4491d5049408c4db34d3289bfb25f02",
            "file": "src/app/views/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "images",
                    "defaultValue": "[\n    '../../../assets/banner.jpg',\n    '../../../assets/banner2.jpg',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  images: string[] = [\n    '../../../assets/banner.jpg',\n    '../../../assets/banner2.jpg',\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".home .title {\n  font-size: 3rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.home .subtitle {\n  font-size: 1.1rem;\n  margin-left: 5px;\n}\n\n.home {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<mat-card class=\"home mat-elevation-z3\">\n  <mat-card-title class=\"title\">Bem vindo</mat-card-title>\n  <mat-card-subtitle class=\"subtitle\">Cadastro de curriculos para vagas</mat-card-subtitle>\n</mat-card>\n<app-footer></app-footer>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-c6cc363527069c02cbb5b2d99b4beac5f6b3ca601484fb111ae3204c265d02cb719c8179becc55938de5a2675934fcc9fc2e9c09cc3a35df165b59533cbc1d08",
            "file": "src/app/views/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BASEURL",
                    "defaultValue": "environment.BASEURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "credentials",
                    "defaultValue": "{\n    email: '',\n    password: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginModel",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "acessar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { LoginModel } from 'src/app/models/login.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { environment } from 'src/environments/environment.development';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  credentials: LoginModel = {\n    email: '',\n    password: ''\n  };\n\n  BASEURL = environment.BASEURL\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private http: HttpClient\n  ) {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  acessar() {\n    if (this.loginForm.valid) {\n      this.credentials = this.loginForm.value as LoginModel;\n\n      this.http.post<LoginModel>(`${this.BASEURL}/user`, this.credentials)\n        .subscribe(\n          response => {\n            this.authService.showMessage('Usuário autenticado:');\n          },\n          error => {\n            this.authService.showMessage('Erro ao autenticar:');\n          }\n        );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  background-image: url('../../../assets/banner2.jpg');\n  background-position: center;\n  background-size: cover;\n}\n\n.loginform {\n  background-color: #00000080;\n  width: 50%;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.login form {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 3px;\n}\n\n.loginform h2 {\n  color: #fff;\n  text-align: center;\n  text-shadow: 1px 1px 1px #00000099;\n  font-size: 30px;\n}\n\n.loginform input {\n  border-radius: 5px;\n  border: none;\n  height: 40px;\n  outline: none;\n  padding-left: 10px;\n}\n\n.loginform label {\n  color: white\n}\n\n.loginform button {\n  border-radius: 10px;\n  border: none;\n  background-color: green;\n  color: white;\n  height: 35px;\n  margin: 1rem;\n  transition-duration: 200ms;\n}\n\n.loginform button:hover {\n  background-color: darkgreen;\n}\n\n.loginform .links {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n}\n.loginform .links a {\n  color: ghostwhite;\n  text-decoration: none;\n}\n\n.loginform .links a:hover {\n  color: #ccc;\n}\n\n.warning p {\n  color: red;\n}\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"container\">\n  <div class=\"login\">\n    <div class=\"loginform\">\n      <h2>Acessar sua conta</h2>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"acessar()\">\n        <label for=\"email\">Email</label>\n        <input type=\"text\" name=\"email\" id=\"email\" formControlName=\"email\" autocomplete=\"current-password\">\n        <div class=\"warning\" *ngIf=\"loginForm.get('email')?.hasError('required') && loginForm.get('email')?.touched\">\n          <p>Email é obrigatório.</p>\n        </div>\n        <div class=\"warning\" *ngIf=\"loginForm.get('email')?.hasError('email') && loginForm.get('email')?.touched\">\n          <p>Email inválido.</p>\n        </div>\n        <label for=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" id=\"password\" formControlName=\"password\" autocomplete=\"current-password\">\n        <div class=\"warning\" *ngIf=\"loginForm.get('password')?.hasError('required') && loginForm.get('password')?.touched\">\n          <p>Senha é obrigatória.</p>\n        </div>\n        <button type=\"submit\" [disabled]=\"!loginForm.valid\">Acessar</button>\n      </form>\n      <div class=\"links\">\n        <a routerLink=\"/register\">Registrar-se</a>\n        <a routerLink=\"/\">Voltar</a>\n      </div>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-5e390f914b4f58929ce4b867e1b50cdd7474b8c3fe07c73873b4022c72f929d8aa1745a67b40de4c2bf053e57f8bb9e678c481222d6ddb3104727373bc4d39e2",
            "file": "src/app/template/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav {\n  background-color: #313131;\n  width: 12rem;\n}\n\n.sidenav i {\n\n  color: #fff;\n  padding-right: 1rem;\n}\n\n.nav-list span {\n  color: white;\n  line-height: 40px;\n  font-size: 15px;\n\n}\n.content {\n  padding: 4rem;\n  background-color: #f7f3f3;\n}\n",
                    "styleUrl": "./nav.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-sidenav-container>\n  <mat-sidenav class=\"sidenav mat-elevation-z4\" mode=\"side\" opened fixedInViewport=\"true\">\n    <mat-nav-list class=\"linksmenu nav-list\">\n      <a mat-list-item routerLink=\"/dashboard\">\n        <i class=\"material-icons\">\n          dashboard\n        </i>\n        <span>dashboard</span>\n      </a>\n      <a mat-list-item routerLink=\"/readcv\">\n        <i class=\"material-icons\">\n          list_alt\n        </i>\n        <span>curriculos</span>\n      </a>\n      <a mat-list-item routerLink=\"/readuser\">\n        <i class=\"material-icons\">\n          person\n        </i>\n        <span>usuários</span>\n      </a>\n      <a mat-list-item routerLink=\"/\">\n        <i class=\"material-icons\">\n          logout\n        </i>\n        <span>sair</span>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content class=\"content\">\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "NewcvComponent",
            "id": "component-NewcvComponent-ab93978cb061e81369bffc073a4b13071fa3c312315d9ccf72fe36b5c0acb031b506b096b89e649103f09b996ac52c3c7cfed3504c4fbdd282aec8f58427a194",
            "file": "src/app/components/cv/newcv/newcv.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-newcv",
            "styleUrls": [
                "./newcv.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./newcv.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CurriculoService } from 'src/app/services/curriculo.service';\n\n@Component({\n  selector: 'app-newcv',\n  templateUrl: './newcv.component.html',\n  styleUrls: ['./newcv.component.css']\n})\nexport class NewcvComponent {\n  registerForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private cvService: CurriculoService) {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      vacancy: ['', Validators.required],\n      cpf: ['', Validators.required],\n      birthday: [null, Validators.required],\n      phone: ['', Validators.required],\n      education: ['', Validators.required],\n      idskill: [1, Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const userData = this.registerForm.value;\n\n      this.cvService.create(userData).subscribe(\n        (response: any) => {\n          this.cvService.showMessage('Novo currículo criado com sucesso.');\n        },\n        (error: any) => {\n          this.cvService.showMessage('Erro ao criar o currículo');\n          if (error.status === 409) {\n            this.cvService.showMessage('Já existe um currículo com este email.');\n          } else {\n            this.cvService.showMessage('Erro ao criar o currículo.');\n          }\n        }\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".newcv {\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  height: 100vh;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.newcv h2 {\n  font-size: 25px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.newcv form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n\n.newcv form button {\n  background-color: green;\n  color: white;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  height: 40px;\n  transition-duration: 200ms;\n}\n\n.newcv form button:hover {\n  background-color: darkgreen;\n}\n\n.links {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n}\n\n.links a {\n  text-decoration: none;\n  color: #262626;\n  margin-bottom: 20px;\n}\n\n.links a:hover {\n  color: #161616\n}\n",
                    "styleUrl": "./newcv.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<section>\n  <div class=\"newcv\">\n    <h2>Novo curriculo</h2>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field>\n        <mat-label>Nome</mat-label>\n        <input matInput formControlName=\"name\" autocomplete=\"name\">\n        <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">Nome é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" autocomplete=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Cargo</mat-label>\n        <input matInput type=\"text\" formControlName=\"vacancy\" autocomplete=\"vacancy\">\n        <mat-error *ngIf=\"registerForm.get('vacancy')?.hasError('required')\">Cargo é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>CPF</mat-label>\n        <input matInput type=\"text\" formControlName=\"cpf\" autocomplete=\"cpf\">\n        <mat-error *ngIf=\"registerForm.get('cpf')?.hasError('required')\">CPF é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Aniversário</mat-label>\n        <input matInput [matDatepicker]=\"picker\" formControlName=\"birthday\" autocomplete=\"birthday\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        <mat-error *ngIf=\"registerForm.get('birthday')?.hasError('required')\">Aniversário é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Telefone</mat-label>\n        <input matInput type=\"text\" formControlName=\"phone\" autocomplete=\"phone\">\n        <mat-error *ngIf=\"registerForm.get('phone')?.hasError('required')\">Telefone é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Educação</mat-label>\n        <mat-select formControlName=\"education\" autocomplete=\"education\">\n          <mat-option value=\"FUNDAMENTAL_COMPLETO\">Fundamental Completo</mat-option>\n          <mat-option value=\"MEDIO_INCOMPLETO\">Médio Incompleto</mat-option>\n          <mat-option value=\"MEDIO_COMPLETO\">Médio Completo</mat-option>\n          <mat-option value=\"SUPERIOR_INCOMPLETO\">Superior Incompleto</mat-option>\n          <mat-option value=\"SUPERIOR_COMPLETO\">Superior Completo</mat-option>\n          <mat-option value=\"MESTRADO\">Mestrado</mat-option>\n          <mat-option value=\"DOUTORADO\">Doutorado</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"registerForm.get('education')?.hasError('required')\">Educação é obrigatória</mat-error>\n      </mat-form-field>\n      <button type=\"submit\" [disabled]=\"registerForm.invalid\">Cadastrar</button>\n    </form>\n    <div class=\"links\">\n      <a routerLink=\"/readcv\">Voltar</a>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "NewuserComponent",
            "id": "component-NewuserComponent-2ce85189d64e6e634678127608004c3b79889dc1c38c9964c03ff03f0ca5a47052f4ff1f6304d719f3384d0abfbc4f0295f99603e5f3911c06cc76ed7add9c3e",
            "file": "src/app/components/user/newuser/newuser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-newuser",
            "styleUrls": [
                "./newuser.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./newuser.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-newuser',\n  templateUrl: './newuser.component.html',\n  styleUrls: ['./newuser.component.css']\n})\nexport class NewuserComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private userService: UsersService) {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      admin: [false]\n    });\n  }\n  ngOnInit(): void {\n    throw new Error('Method not implemented.');\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const userData = this.registerForm.value;\n\n      this.userService.create(userData).subscribe(\n        (response: any) => {\n          this.userService.showMessage('Novo usuário criado com sucesso.');\n        },\n        (error: any) => {\n          console.error('Erro ao criar o usuário:', error);\n          if (error.status === 409) {\n            this.userService.showMessage('Já existe um usuário com este email.');\n          } else {\n            this.userService.showMessage('Erro ao criar o usuário.');\n          }\n        }\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".newuser {\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  height: 100vh;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.newuser h2 {\n  font-size: 25px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.newuser form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n\n.newuser form button {\n  background-color: green;\n  color: white;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  height: 40px;\n  transition-duration: 200ms;\n}\n\n.newuser form button:hover {\n  background-color: darkgreen;\n}\n\n.links {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n}\n\n.links a {\n  text-decoration: none;\n  color: #262626;\n}\n\n.links a:hover {\n  color: #161616\n}\n",
                    "styleUrl": "./newuser.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-nav></app-nav>\n<section>\n  <div class=\"newuser\">\n    <h2>Novo usuário</h2>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field>\n        <mat-label>Nome</mat-label>\n        <input matInput formControlName=\"name\" autocomplete=\"name\">\n        <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">Nome é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" autocomplete=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Senha</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"new-password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Senha é obrigatória</mat-error>\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">Senha deve ter no mínimo 6 caracteres</mat-error>\n      </mat-form-field>\n      <mat-checkbox formControlName=\"admin\">Admin</mat-checkbox>\n      <button type=\"submit\" [disabled]=\"registerForm.invalid\">Cadastrar</button>\n    </form>\n    <div class=\"links\">\n      <a routerLink=\"/\">Voltar</a>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "PagenotfoundComponent",
            "id": "component-PagenotfoundComponent-381004bc20bd7b6cba88c30b4703e50ced6e9ca123c16ccefd31e82ed3cff33d386e80df3afa4e92c48ae7021443e7e458972d3afb6f4ea5945c3171c000a009",
            "file": "src/app/views/pagenotfound/pagenotfound.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagenotfound",
            "styleUrls": [
                "./pagenotfound.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./pagenotfound.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pagenotfound',\n  templateUrl: './pagenotfound.component.html',\n  styleUrls: ['./pagenotfound.component.css']\n})\nexport class PagenotfoundComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".not-found-container {\n  text-align: center;\n  margin-top: 50px;\n  height: 80vh;\n}\n\nh1 {\n  font-size: 36px;\n  color: red;\n}\n\na {\n  text-decoration: underline;\n  cursor: pointer;\n}\n",
                    "styleUrl": "./pagenotfound.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<div class=\"not-found-container\">\n  <h1>Página não encontrada</h1>\n  <p>A página que você está procurando não foi encontrada.</p>\n  <a routerLink=\"/\">Voltar para a página inicial</a>\n</div>\n<app-footer></app-footer>\n"
        },
        {
            "name": "ReadcvComponent",
            "id": "component-ReadcvComponent-da2114e6e2b8b9d8a9baa33a0c2425478317203ed3263384a17e0c555daf63c4ed54bc1e302be03a660ad17e9b81e91bf4731a1834e3b19c226eb1886acd9fce",
            "file": "src/app/components/cv/readcv/readcv.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-readcv",
            "styleUrls": [
                "./readcv.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./readcv.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cv",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurriculumModel[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'email', 'vacancy', 'cpf', 'birthday', 'phone', 'education', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "formatPhone",
                    "args": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformEducationText",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CurriculumModel } from 'src/app/models/curriculum.model';\nimport { CurriculoService } from 'src/app/services/curriculo.service';\n\n@Component({\n  selector: 'app-readcv',\n  templateUrl: './readcv.component.html',\n  styleUrls: ['./readcv.component.css']\n})\nexport class ReadcvComponent {\n  cv: CurriculumModel[] = [];\n  displayedColumns: string[] = ['id', 'name', 'email', 'vacancy', 'cpf', 'birthday', 'phone', 'education', 'action'];\n\n  constructor(private cvService: CurriculoService) { }\n\n  ngOnInit(): void {\n    this.cvService.read().subscribe(cv => {\n      this.cv = cv;\n    })\n  }\n\n  transformEducationText(text: string): string {\n    return text.replace(/_/g, ' ').toLowerCase();\n  }\n\n  formatPhone(phone: string): string {\n    if (!phone) return phone;\n    const numericValue = phone.replace(/\\D/g, '');\n    if (numericValue.length >= 11) {\n      return `(${numericValue.substring(0, 2)}) ${numericValue.substring(2, 3)} ${numericValue.substring(3, 7)}-${numericValue.substring(7)}`;\n    } else {\n      return phone;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./readcv.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"read mat-elevation-z4\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\" [dataSource]=\"cv\">\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Nome</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"email\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.email}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"vacancy\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Vaga</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.vacancy}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"cpf\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>CPF</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.cpf}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"birthday\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Aniversário</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.birthday | date: 'dd/MM/yyyy'}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"phone\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Telefone</th>\n      <td mat-cell *matCellDef=\"let row\">{{ formatPhone(row.phone) }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"education\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Educação</th>\n      <td mat-cell *matCellDef=\"let row\">{{ transformEducationText(row.education) }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Ações</th>\n      <td mat-cell *matCellDef=\"let row\">\n        <a routerLink=\"/readcv/update/{{row.id}}\" class=\"edit\">\n          <i class=\"material-icons\">\n            edit\n          </i>\n        </a>\n        <a routerLink=\"/readcv/delete/{{row.id}}\" class=\"delete\">\n          <i class=\"material-icons\">\n            delete\n          </i>\n        </a>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator [length]=\"cv.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 20]\"\n    aria-label=\"Select page\">\n  </mat-paginator>\n</div>\n"
        },
        {
            "name": "ReaduserComponent",
            "id": "component-ReaduserComponent-cacf819053bf396bdd1df4ad7d3e2247ecf5dad6a7fda07f2bbdd6dc9d5c7b5d148005fcb5cffc9c1a8c83bb79a6fb9e293faf914395da6eaf45e3dd6b7f76f0",
            "file": "src/app/components/user/readuser/readuser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-readuser",
            "styleUrls": [
                "./readuser.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./readuser.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'email', 'admin', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersModel[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UsersModel } from 'src/app/models/users.model';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-readuser',\n  templateUrl: './readuser.component.html',\n  styleUrls: ['./readuser.component.css']\n})\nexport class ReaduserComponent implements OnInit{\n  user: UsersModel[] = [];\n  displayedColumns: string[] = ['id', 'name', 'email', 'admin', 'action'];\n\n  constructor(private userService: UsersService) {}\n\n  ngOnInit(): void {\n    this.userService.read().subscribe(user => {\n      this.user = user;\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./readuser.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"read mat-elevation-z4\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\" [dataSource]=\"user\">\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Nome</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"email\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.email}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"admin\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Admin</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.admin}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Ações</th>\n      <td mat-cell *matCellDef=\"let row\">\n        <a routerLink=\"/readuser/update/{{row.id}}\" class=\"edit\">\n          <i class=\"material-icons\">\n            edit\n          </i>\n        </a>\n        <a routerLink=\"/readuser/delete/{{row.id}}\" class=\"delete\">\n          <i class=\"material-icons\">\n            delete\n          </i>\n        </a>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator [length]=\"user.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 20]\"\n    aria-label=\"Select page\">\n  </mat-paginator>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-12961e805fec9fd96fcccae7f0251dc923e804f2ffa7982617ebf485576b29d59a8516416b6ac5e732cc7f053fd60414124ed304a253aefca123c5cd173e7747",
            "file": "src/app/views/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private userService: UsersService) {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      admin: [false]\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const userData = this.registerForm.value;\n\n      this.userService.create(userData).subscribe(\n        (response: any) => {\n          this.userService.showMessage('Novo usuário criado:');\n        },\n        (error: any) => {\n          this.userService.showMessage('Erro ao criar o usuário:');\n        }\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".registerform {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.registerform h2 {\n  font-size: 25px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.registerform form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n}\n\n.registerform form button {\n  background-color: green;\n  color: white;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  height: 40px;\n  transition-duration: 200ms;\n}\n\n.registerform form button:hover {\n  background-color: darkgreen;\n}\n\n.links {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n}\n\n.links a {\n  text-decoration: none;\n  color: #262626;\n}\n\n.links a:hover {\n  color: #161616\n}\n",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section>\n  <div class=\"registerform\">\n    <h2>Novo usuário</h2>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field>\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"name\" autocomplete=\"current-password\">\n        <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">name é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" autocomplete=\"current-password\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"current-password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password é obrigatório</mat-error>\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">Password deve ter no mínimo 6 caracteres</mat-error>\n      </mat-form-field>\n      <mat-checkbox formControlName=\"admin\">Admin</mat-checkbox>\n      <button type=\"submit\" [disabled]=\"registerForm.invalid\">Acessar</button>\n    </form>\n    <div class=\"links\">\n      <a routerLink=\"/\">Voltar</a>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "UpdatecvComponent",
            "id": "component-UpdatecvComponent-82925076848900aa81f0b996987f77591a1755ddfa4d734279f8dc96c7df6625a4b42cf31c43bcc9ad0d02e539db477b62b954dfefec1ab68eae187db9d0c739",
            "file": "src/app/components/cv/updatecv/updatecv.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-updatecv",
            "styleUrls": [
                "./updatecv.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./updatecv.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "updateForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CurriculoService } from 'src/app/services/curriculo.service';\n\n@Component({\n  selector: 'app-updatecv',\n  templateUrl: './updatecv.component.html',\n  styleUrls: ['./updatecv.component.css']\n})\nexport class UpdatecvComponent implements OnInit {\n  updateForm!: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private cvService: CurriculoService) {\n    this.updateForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      vacancy: ['', Validators.required],\n      cpf: ['', Validators.required],\n      birthday: [null, Validators.required],\n      phone: ['', Validators.required],\n      education: ['', Validators.required],\n      idskill: [2, Validators.required]\n    });\n  }\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (this.updateForm.valid) {\n      const formData = this.updateForm.value;\n      this.cvService.update(formData).subscribe(\n        (response: any) => {\n          this.cvService.showMessage('Dados do currículo atualizados');\n        },\n        (error: any) => {\n          if (error.status === 409) {\n            this.cvService.showMessage('Já existe um currículo com estes dados.');\n          } else {\n            this.cvService.showMessage('Erro ao editar um currículo');\n          }\n        }\n      );\n    }\n  }\n\n  cancelar() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".updatecv {\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  height: 100vh;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.updatecv h2 {\n  font-size: 25px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.updatecv form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n\n.updatecv form button {\n  background-color: green;\n  color: white;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  height: 40px;\n  transition-duration: 200ms;\n}\n\n.updatecv form button:hover {\n  background-color: darkgreen;\n}\n\n.links {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n}\n\n.links a {\n  text-decoration: none;\n  color: #262626;\n  margin-bottom: 20px;\n}\n\n.links a:hover {\n  color: #161616\n}\n",
                    "styleUrl": "./updatecv.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cvService",
                        "type": "CurriculoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-nav></app-nav>\n<section>\n  <div class=\"updatecv\">\n    <h2>Editar curriculo</h2>\n    <form [formGroup]=\"updateForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field>\n        <mat-label>Nome</mat-label>\n        <input matInput formControlName=\"name\" autocomplete=\"name\">\n        <mat-error *ngIf=\"updateForm.get('name')?.hasError('required')\">Nome é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" autocomplete=\"email\">\n        <mat-error *ngIf=\"updateForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n        <mat-error *ngIf=\"updateForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Cargo</mat-label>\n        <input matInput type=\"text\" formControlName=\"vacancy\" autocomplete=\"vacancy\">\n        <mat-error *ngIf=\"updateForm.get('vacancy')?.hasError('required')\">Cargo é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>CPF</mat-label>\n        <input matInput type=\"text\" formControlName=\"cpf\" autocomplete=\"cpf\">\n        <mat-error *ngIf=\"updateForm.get('cpf')?.hasError('required')\">CPF é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Aniversário</mat-label>\n        <input matInput [matDatepicker]=\"picker\" formControlName=\"birthday\" autocomplete=\"birthday\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        <mat-error *ngIf=\"updateForm.get('birthday')?.hasError('required')\">Aniversário é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Telefone</mat-label>\n        <input matInput type=\"text\" formControlName=\"phone\" autocomplete=\"phone\">\n        <mat-error *ngIf=\"updateForm.get('phone')?.hasError('required')\">Telefone é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Educação</mat-label>\n        <mat-select formControlName=\"education\" autocomplete=\"education\">\n          <mat-option value=\"FUNDAMENTAL_COMPLETO\">Fundamental Completo</mat-option>\n          <mat-option value=\"MEDIO_INCOMPLETO\">Médio Incompleto</mat-option>\n          <mat-option value=\"MEDIO_COMPLETO\">Médio Completo</mat-option>\n          <mat-option value=\"SUPERIOR_INCOMPLETO\">Superior Incompleto</mat-option>\n          <mat-option value=\"SUPERIOR_COMPLETO\">Superior Completo</mat-option>\n          <mat-option value=\"MESTRADO\">Mestrado</mat-option>\n          <mat-option value=\"DOUTORADO\">Doutorado</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"updateForm.get('education')?.hasError('required')\">Educação é obrigatória</mat-error>\n      </mat-form-field>\n      <button type=\"submit\" [disabled]=\"updateForm.invalid\">Salvar</button>\n    </form>\n    <div class=\"links\">\n      <a routerLink=\"/readcv\">Cancelar</a>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "UpdateuserComponent",
            "id": "component-UpdateuserComponent-aaa1bbac7ed338edfca0d6c76e05eb33d4d8e8e29f0d58daa55289f54378df6ba4689304aaa3f38bff5fa23850f870bd43ee9d4c7e6187d971c78ba2532a3f2b",
            "file": "src/app/components/user/updateuser/updateuser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-updateuser",
            "styleUrls": [
                "./updateuser.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./updateuser.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersModel",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UsersModel } from 'src/app/models/users.model';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-updateuser',\n  templateUrl: './updateuser.component.html',\n  styleUrls: ['./updateuser.component.css']\n})\nexport class UpdateuserComponent {\n  registerForm: FormGroup;\n  user!: UsersModel;\n  userId: number;\n\n  constructor(private formBuilder: FormBuilder, private userService: UsersService, private router: Router,\n    private route: ActivatedRoute) {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      admin: [false]\n    });\n\n    this.userId = +this.route.snapshot.paramMap.get('id')!;\n  }\n\n  ngOnInit(): void {\n    if (!isNaN(this.userId)) {\n      this.userService.readById(this.userId).subscribe(\n        (userData: UsersModel | null) => {\n          if (userData) {\n            this.user = userData;\n\n            this.registerForm.patchValue({\n              name: this.user.name,\n              email: this.user.email,\n              password: '',\n              admin: this.user.admin\n            });\n          }\n        },\n        (error: any) => {\n          console.error('Erro ao carregar o usuário:', error);\n        }\n      );\n    } else {\n      console.error('ID do usuário inválido:', this.userId);\n    }\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const userData = this.registerForm.value;\n\n      this.userService.update(this.userId, userData).subscribe(\n        (response: any) => {\n          this.userService.showMessage('Usuário editado com sucesso.');\n          this.router.navigate(['readuser'])\n        },\n        (error: any) => {\n          this.userService.showMessage('Erro ao editar o usuário:');\n          if (error.status === 409) {\n            this.userService.showMessage('Já existe um usuário com este email.');\n          } else {\n            this.userService.showMessage('Erro ao alterar os dados do usuário.');\n          }\n        }\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".updateuser {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  width: 60%;\n  margin: 0 20rem;\n}\n\n.updateuser h2 {\n  font-size: 25px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.updateuser form {\n  display: flex;\n  flex-direction: column;\n  padding: 2px 20px;\n  width: 100%;\n}\n\n.updateuser form button {\n  background-color: green;\n  color: white;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  height: 40px;\n  transition-duration: 200ms;\n}\n\n.updateuser form button:hover {\n  background-color: darkgreen;\n}\n\n.links {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n}\n\n.links a {\n  text-decoration: none;\n  color: #262626;\n}\n\n.links a:hover {\n  color: #161616\n}\n",
                    "styleUrl": "./updateuser.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<section>\n  <div class=\"updateuser\">\n    <h2>Editar usuário</h2>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field>\n        <mat-label>Nome</mat-label>\n        <input matInput formControlName=\"name\" autocomplete=\"name\">\n        <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">Nome é obrigatório</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" autocomplete=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Senha</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"new-password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Senha é obrigatória</mat-error>\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">Senha deve ter no mínimo 6 caracteres</mat-error>\n      </mat-form-field>\n      <mat-checkbox formControlName=\"admin\">Admin</mat-checkbox>\n      <button type=\"submit\" [disabled]=\"registerForm.invalid\">Cadastrar</button>\n    </form>\n    <div class=\"links\">\n      <a routerLink=\"/\">Voltar</a>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "UsercrudComponent",
            "id": "component-UsercrudComponent-5b35fa4168e851eb80ad03730b5f291b6e131f45eaafa226f1e77c66f90648dca716398b1ec4bffbde7da1ef01dc13c853190b15a27c4b5843fce03c440e51e5",
            "file": "src/app/template/usercrud/usercrud.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-usercrud",
            "styleUrls": [
                "./usercrud.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./usercrud.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToCreateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-usercrud',\n  templateUrl: './usercrud.component.html',\n  styleUrls: ['./usercrud.component.css']\n})\nexport class UsercrudComponent {\n  constructor(private router: Router) {}\n\n  navigateToCreateUser(): void {\n    this.router.navigate(['readuser/newuser'])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./usercrud.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-nav></app-nav>\n<div class=\"crud\">\n  <h2>Usuários</h2>\n  <button class=\"createbtn\" mat-raised-button (click)=\"navigateToCreateUser()\" color=\"primary\">Criar Usuário</button>\n  <app-readuser></app-readuser>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-6c3595696aea5df37f9e6dd27eb789ea79488dd23d65132ae79d38beec7ea955a80e00eb9521ba7ac53329020c4b4e9c932f6cc50f9b59866a0554360e231cf9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { HomeComponent } from './views/home/home.component';\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav'\nimport { MatCardModule } from '@angular/material/card'\nimport { MatListModule } from '@angular/material/list';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgChartsModule, NgChartsConfiguration } from 'ng2-charts';\nimport { LoginComponent } from './views/login/login.component';\nimport { RegisterComponent } from './views/register/register.component';\nimport { DashboardComponent } from './views/dashboard/dashboard.component';\n\nimport { CarouselModule } from 'ngx-bootstrap/carousel';\nimport { NewcvComponent } from './components/cv/newcv/newcv.component';\nimport { ReadcvComponent } from './components/cv/readcv/readcv.component';\nimport { UpdatecvComponent } from './components/cv/updatecv/updatecv.component';\nimport { DeletecvComponent } from './components/cv/deletecv/deletecv.component';\nimport { NewuserComponent } from './components/user/newuser/newuser.component';\nimport { UpdateuserComponent } from './components/user/updateuser/updateuser.component';\nimport { ReaduserComponent } from './components/user/readuser/readuser.component';\nimport { DeleteuserComponent } from './components/user/deleteuser/deleteuser.component';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { HeaderComponent } from './template/header/header.component';\nimport { FooterComponent } from './template/footer/footer.component';\nimport { NavComponent } from './template/nav/nav.component';\nimport { UsercrudComponent } from './template/usercrud/usercrud.component';\nimport { CvcrudComponent } from './template/cvcrud/cvcrud.component';\nimport { PagenotfoundComponent } from './views/pagenotfound/pagenotfound.component';\nimport { HttpModule } from './module/http/http.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LoginComponent,\n    RegisterComponent,\n    DashboardComponent,\n    NewcvComponent,\n    ReadcvComponent,\n    UpdatecvComponent,\n    DeletecvComponent,\n    NewuserComponent,\n    UpdateuserComponent,\n    ReaduserComponent,\n    DeleteuserComponent,\n    HeaderComponent,\n    FooterComponent,\n    NavComponent,\n    UsercrudComponent,\n    CvcrudComponent,\n    PagenotfoundComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatInputModule,\n    FormsModule,\n    MatFormFieldModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatSelectModule,\n    NgChartsModule,\n    ReactiveFormsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatCheckboxModule,\n    HttpModule,\n    CarouselModule.forRoot(),\n  ],\n  providers: [{ provide: NgChartsConfiguration, useValue: { generateColors: false }}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CvcrudComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DeletecvComponent"
                        },
                        {
                            "name": "DeleteuserComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "NewcvComponent"
                        },
                        {
                            "name": "NewuserComponent"
                        },
                        {
                            "name": "PagenotfoundComponent"
                        },
                        {
                            "name": "ReadcvComponent"
                        },
                        {
                            "name": "ReaduserComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "UpdatecvComponent"
                        },
                        {
                            "name": "UpdateuserComponent"
                        },
                        {
                            "name": "UsercrudComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HttpModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-db54483c1bfcc4fdeb4903a1f0d581627b7654151f0d6453716cf7f5d7b777e879ca8c9fdaa8371263697bac3577146eec56bc09aff8981ef9ce0b45e3f29503",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './views/home/home.component';\n\nimport { LoginComponent } from './views/login/login.component';\nimport { RegisterComponent } from './views/register/register.component';\nimport { DashboardComponent } from './views/dashboard/dashboard.component';\nimport { CvcrudComponent } from './template/cvcrud/cvcrud.component';\nimport { UsercrudComponent } from './template/usercrud/usercrud.component';\nimport { UpdatecvComponent } from './components/cv/updatecv/updatecv.component';\nimport { DeletecvComponent } from './components/cv/deletecv/deletecv.component';\nimport { UpdateuserComponent } from './components/user/updateuser/updateuser.component';\nimport { NewuserComponent } from './components/user/newuser/newuser.component';\nimport { DeleteuserComponent } from './components/user/deleteuser/deleteuser.component';\nimport { NewcvComponent } from './components/cv/newcv/newcv.component';\nimport { PagenotfoundComponent } from './views/pagenotfound/pagenotfound.component';\n\nconst routes: Routes = [\n  { path: \"\", component: HomeComponent },\n  { path: \"login\", component: LoginComponent },\n  { path: \"register\", component: RegisterComponent },\n  { path: \"user\", component: DashboardComponent },\n  { path: \"readcv\", component:  CvcrudComponent},\n  { path: \"readcv/update/:id\", component:  UpdatecvComponent},\n  { path: \"readcv/delete/:id\", component:  DeletecvComponent},\n  { path: \"readcv/newcv\", component:  NewcvComponent},\n  { path: \"readcv/delete/:id\", component:  DeletecvComponent},\n  { path: \"readuser\", component:  UsercrudComponent},\n  { path: \"readuser/newuser\", component:  NewuserComponent},\n  { path: \"readuser/update/:id\", component:  UpdateuserComponent},\n  { path: \"readuser/delete/:id\", component:  DeleteuserComponent},\n  { path: \"dashboard\", component: DashboardComponent },\n  { path: '**', component: PagenotfoundComponent },\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HttpModule",
            "id": "module-HttpModule-9880efaf47fdf619d75a3e272fa30564734b367f71713fa4446a14a112208a0d81fae3fa2c593ef0a66ad74991905d39502012cd530215bea83c91693c1bbce0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/module/http/http.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class HttpModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "activatedRouteStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  snapshot: {\n    paramMap: {\n      get: (key: string) => '1',\n    },\n  },\n}"
            },
            {
                "name": "activatedRouteStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  snapshot: {\n    paramMap: {\n      get: (param: string) => '1',\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/template/cvcrud/cvcrud.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: CvcrudComponent,\n  template: `\n    <div>\n      <h2>Gerenciamento de Currículos</h2>\n      <button mat-raised-button color=\"primary\" (click)=\"navigateToCreateCV()\">\n        Criar Currículo\n      </button>\n      <app-readcv></app-readcv>\n    </div>\n  `,\n  props: {\n    navigateToCreateCV: () => alert('Navigating to Create CV'), // Mock function for navigation\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/template/footer/footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: FooterComponent,\n  template: `\n    <mat-toolbar class=\"footer\">\n      <span>\n        Desafio Diamond Solutions\n      </span>\n    </mat-toolbar>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/template/header/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: HeaderComponent,\n  template: `\n    <mat-toolbar class=\"header mat-elevation-z3\">\n      <div>\n        <span>\n          <a href=\"/\">\n            <img routerLink=\"/\" class=\"logo\" src=\"../../../assets/logo.png\" alt=\"logo\">\n          </a>\n          <h2>Cadastro de currículos</h2>\n        </span>\n        <span [ngClass]=\"{'hide-element': condition}\" class=\"title-group\">\n          <a href=\"/login\">\n            <i class=\"material-icons\">\n              login\n            </i>\n            Acessar conta\n          </a>\n        </span>\n      </div>\n    </mat-toolbar>\n  `,\n  props: {\n    condition: true,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/template/nav/nav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: NavComponent,\n  template: `\n    <mat-sidenav-container>\n      <mat-sidenav class=\"sidenav mat-elevation-z4\" mode=\"side\" opened fixedInViewport=\"true\">\n        <mat-nav-list class=\"linksmenu nav-list\">\n          <a mat-list-item routerLink=\"/dashboard\">\n            <i class=\"material-icons\">\n              dashboard\n            </i>\n            <span>dashboard</span>\n          </a>\n          <a mat-list-item routerLink=\"/readcv\">\n            <i class=\"material-icons\">\n              list_alt\n            </i>\n            <span>curriculos</span>\n          </a>\n          <a mat-list-item routerLink=\"/readuser\">\n            <i class=\"material-icons\">\n              person\n            </i>\n            <span>usuários</span>\n          </a>\n          <a mat-list-item routerLink=\"/\">\n            <i class=\"material-icons\">\n              logout\n            </i>\n            <span>sair</span>\n          </a>\n        </mat-nav-list>\n      </mat-sidenav>\n      <mat-sidenav-content class=\"content\">\n        <router-outlet></router-outlet>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/template/usercrud/usercrud.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: UsercrudComponent,\n  template: `\n    <app-nav></app-nav>\n    <div class=\"crud\">\n      <h2>Usuários</h2>\n      <button class=\"createbtn\" mat-raised-button (click)=\"navigateToCreateUser()\" color=\"primary\">Criar Usuário</button>\n      <app-readuser></app-readuser>\n    </div>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/home/home.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: HomeComponent,\n  template: `\n    <app-header></app-header>\n    <mat-card class=\"home mat-elevation-z3\">\n      <mat-card-title class=\"title\">Bem vindo</mat-card-title>\n      <mat-card-subtitle class=\"subtitle\">Cadastro de currículos para vagas</mat-card-subtitle>\n    </mat-card>\n    <app-footer></app-footer>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/login/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: LoginComponent,\n  template: `\n    <div class=\"container\">\n      <app-login></app-login>\n    </div>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/pagenotfound/pagenotfound.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: PagenotfoundComponent,\n  template: `\n    <div class=\"not-found-container\">\n      <h1>Página não encontrada</h1>\n      <p>A página que você está procurando não foi encontrada.</p>\n      <a routerLink=\"/\">Voltar para a página inicial</a>\n    </div>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/register/register.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: RegisterComponent,\n  template: `\n    <div class=\"registerform\">\n      <h2>Novo usuário</h2>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <mat-form-field>\n          <mat-label>Name</mat-label>\n          <input matInput formControlName=\"name\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">name é obrigatório</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Email</mat-label>\n          <input matInput formControlName=\"email\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n          <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Password</mat-label>\n          <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password é obrigatório</mat-error>\n          <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">Password deve ter no mínimo 6 caracteres</mat-error>\n        </mat-form-field>\n        <mat-checkbox formControlName=\"admin\">Admin</mat-checkbox>\n        <button type=\"submit\" [disabled]=\"registerForm.invalid\">Acessar</button>\n      </form>\n      <div class=\"links\">\n        <a routerLink=\"/\">Voltar</a>\n      </div>\n    </div>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/cv/deletecv/deletecv.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: DeletecvComponent,\n  template: `\n    <app-deletecv></app-deletecv>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/cv/newcv/newcv.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: NewcvComponent,\n  template: `\n    <app-newcv></app-newcv>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/cv/readcv/readcv.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: ReadcvComponent,\n  template: `\n    <app-readcv></app-readcv>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/cv/updatecv/update.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: NewcvComponent,\n  template: `\n    <app-newcv></app-newcv>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: DeleteuserComponent,\n  template: `\n    <app-deleteuser></app-deleteuser>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/newuser/newuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: NewuserComponent,\n  template: `\n    <app-newuser></app-newuser>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/readuser/readuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: ReaduserComponent,\n  template: `\n    <app-readuser></app-readuser>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: UpdateuserComponent,\n  template: `\n    <app-updateuser></app-updateuser>\n  `,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  BASEURL: \"http://localhost:3000\"\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "routerStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  navigate: (commands: any[]) => console.log('Navigated to:', commands),\n}"
            },
            {
                "name": "userServiceStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  readById: (id: number) => of({\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com',\n    admin: true,\n  } as UsersModel),\n  delete: (id: number) => of({}),\n  showMessage: (message: string) => {},\n}"
            },
            {
                "name": "userServiceStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/newuser/newuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  create: (userData: any) => of({}),\n  showMessage: (message: string) => {},\n}"
            },
            {
                "name": "userServiceStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/readuser/readuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  read: () => of([]),\n}"
            },
            {
                "name": "userServiceStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  readById: (userId: number) => {\n    if (userId === 1) {\n      return of({\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com',\n        admin: true,\n      });\n    } else {\n      return of(null);\n    }\n  },\n  update: (userId: number, userData: any) => of({}),\n  showMessage: (message: string) => console.log(message),\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/user/deleteuser/deleteuser.stories.ts": [
                {
                    "name": "activatedRouteStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  snapshot: {\n    paramMap: {\n      get: (key: string) => '1',\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: DeleteuserComponent,\n  template: `\n    <app-deleteuser></app-deleteuser>\n  `,\n})"
                },
                {
                    "name": "userServiceStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  readById: (id: number) => of({\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com',\n    admin: true,\n  } as UsersModel),\n  delete: (id: number) => of({}),\n  showMessage: (message: string) => {},\n}"
                }
            ],
            "src/app/components/user/updateuser/updateuser.stories.ts": [
                {
                    "name": "activatedRouteStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  snapshot: {\n    paramMap: {\n      get: (param: string) => '1',\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: UpdateuserComponent,\n  template: `\n    <app-updateuser></app-updateuser>\n  `,\n})"
                },
                {
                    "name": "routerStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  navigate: (commands: any[]) => console.log('Navigated to:', commands),\n}"
                },
                {
                    "name": "userServiceStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/updateuser/updateuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  readById: (userId: number) => {\n    if (userId === 1) {\n      return of({\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com',\n        admin: true,\n      });\n    } else {\n      return of(null);\n    }\n  },\n  update: (userId: number, userData: any) => of({}),\n  showMessage: (message: string) => console.log(message),\n}"
                }
            ],
            "src/app/template/cvcrud/cvcrud.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/template/cvcrud/cvcrud.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: CvcrudComponent,\n  template: `\n    <div>\n      <h2>Gerenciamento de Currículos</h2>\n      <button mat-raised-button color=\"primary\" (click)=\"navigateToCreateCV()\">\n        Criar Currículo\n      </button>\n      <app-readcv></app-readcv>\n    </div>\n  `,\n  props: {\n    navigateToCreateCV: () => alert('Navigating to Create CV'), // Mock function for navigation\n  },\n})"
                }
            ],
            "src/app/template/footer/footer.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/template/footer/footer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: FooterComponent,\n  template: `\n    <mat-toolbar class=\"footer\">\n      <span>\n        Desafio Diamond Solutions\n      </span>\n    </mat-toolbar>\n  `,\n})"
                }
            ],
            "src/app/template/header/header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/template/header/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: HeaderComponent,\n  template: `\n    <mat-toolbar class=\"header mat-elevation-z3\">\n      <div>\n        <span>\n          <a href=\"/\">\n            <img routerLink=\"/\" class=\"logo\" src=\"../../../assets/logo.png\" alt=\"logo\">\n          </a>\n          <h2>Cadastro de currículos</h2>\n        </span>\n        <span [ngClass]=\"{'hide-element': condition}\" class=\"title-group\">\n          <a href=\"/login\">\n            <i class=\"material-icons\">\n              login\n            </i>\n            Acessar conta\n          </a>\n        </span>\n      </div>\n    </mat-toolbar>\n  `,\n  props: {\n    condition: true,\n  },\n})"
                }
            ],
            "src/app/template/nav/nav.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/template/nav/nav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NavComponent,\n  template: `\n    <mat-sidenav-container>\n      <mat-sidenav class=\"sidenav mat-elevation-z4\" mode=\"side\" opened fixedInViewport=\"true\">\n        <mat-nav-list class=\"linksmenu nav-list\">\n          <a mat-list-item routerLink=\"/dashboard\">\n            <i class=\"material-icons\">\n              dashboard\n            </i>\n            <span>dashboard</span>\n          </a>\n          <a mat-list-item routerLink=\"/readcv\">\n            <i class=\"material-icons\">\n              list_alt\n            </i>\n            <span>curriculos</span>\n          </a>\n          <a mat-list-item routerLink=\"/readuser\">\n            <i class=\"material-icons\">\n              person\n            </i>\n            <span>usuários</span>\n          </a>\n          <a mat-list-item routerLink=\"/\">\n            <i class=\"material-icons\">\n              logout\n            </i>\n            <span>sair</span>\n          </a>\n        </mat-nav-list>\n      </mat-sidenav>\n      <mat-sidenav-content class=\"content\">\n        <router-outlet></router-outlet>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  `,\n})"
                }
            ],
            "src/app/template/usercrud/usercrud.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/template/usercrud/usercrud.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: UsercrudComponent,\n  template: `\n    <app-nav></app-nav>\n    <div class=\"crud\">\n      <h2>Usuários</h2>\n      <button class=\"createbtn\" mat-raised-button (click)=\"navigateToCreateUser()\" color=\"primary\">Criar Usuário</button>\n      <app-readuser></app-readuser>\n    </div>\n  `,\n})"
                }
            ],
            "src/app/views/home/home.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/home/home.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: HomeComponent,\n  template: `\n    <app-header></app-header>\n    <mat-card class=\"home mat-elevation-z3\">\n      <mat-card-title class=\"title\">Bem vindo</mat-card-title>\n      <mat-card-subtitle class=\"subtitle\">Cadastro de currículos para vagas</mat-card-subtitle>\n    </mat-card>\n    <app-footer></app-footer>\n  `,\n})"
                }
            ],
            "src/app/views/login/login.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/login/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: LoginComponent,\n  template: `\n    <div class=\"container\">\n      <app-login></app-login>\n    </div>\n  `,\n})"
                }
            ],
            "src/app/views/pagenotfound/pagenotfound.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/pagenotfound/pagenotfound.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PagenotfoundComponent,\n  template: `\n    <div class=\"not-found-container\">\n      <h1>Página não encontrada</h1>\n      <p>A página que você está procurando não foi encontrada.</p>\n      <a routerLink=\"/\">Voltar para a página inicial</a>\n    </div>\n  `,\n})"
                }
            ],
            "src/app/views/register/register.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/register/register.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RegisterComponent,\n  template: `\n    <div class=\"registerform\">\n      <h2>Novo usuário</h2>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <mat-form-field>\n          <mat-label>Name</mat-label>\n          <input matInput formControlName=\"name\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('name')?.hasError('required')\">name é obrigatório</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Email</mat-label>\n          <input matInput formControlName=\"email\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email é obrigatório</mat-error>\n          <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email inválido</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Password</mat-label>\n          <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"current-password\">\n          <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password é obrigatório</mat-error>\n          <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">Password deve ter no mínimo 6 caracteres</mat-error>\n        </mat-form-field>\n        <mat-checkbox formControlName=\"admin\">Admin</mat-checkbox>\n        <button type=\"submit\" [disabled]=\"registerForm.invalid\">Acessar</button>\n      </form>\n      <div class=\"links\">\n        <a routerLink=\"/\">Voltar</a>\n      </div>\n    </div>\n  `,\n})"
                }
            ],
            "src/app/components/cv/deletecv/deletecv.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/cv/deletecv/deletecv.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: DeletecvComponent,\n  template: `\n    <app-deletecv></app-deletecv>\n  `,\n})"
                }
            ],
            "src/app/components/cv/newcv/newcv.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/cv/newcv/newcv.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NewcvComponent,\n  template: `\n    <app-newcv></app-newcv>\n  `,\n})"
                }
            ],
            "src/app/components/cv/readcv/readcv.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/cv/readcv/readcv.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ReadcvComponent,\n  template: `\n    <app-readcv></app-readcv>\n  `,\n})"
                }
            ],
            "src/app/components/cv/updatecv/update.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/cv/updatecv/update.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NewcvComponent,\n  template: `\n    <app-newcv></app-newcv>\n  `,\n})"
                }
            ],
            "src/app/components/user/newuser/newuser.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/newuser/newuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NewuserComponent,\n  template: `\n    <app-newuser></app-newuser>\n  `,\n})"
                },
                {
                    "name": "userServiceStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/newuser/newuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  create: (userData: any) => of({}),\n  showMessage: (message: string) => {},\n}"
                }
            ],
            "src/app/components/user/readuser/readuser.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/readuser/readuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ReaduserComponent,\n  template: `\n    <app-readuser></app-readuser>\n  `,\n})"
                },
                {
                    "name": "userServiceStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/readuser/readuser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  read: () => of([]),\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  BASEURL: \"http://localhost:3000\"\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "user",
                        "component": "DashboardComponent"
                    },
                    {
                        "path": "readcv",
                        "component": "CvcrudComponent"
                    },
                    {
                        "path": "readcv/update/:id",
                        "component": "UpdatecvComponent"
                    },
                    {
                        "path": "readcv/delete/:id",
                        "component": "DeletecvComponent"
                    },
                    {
                        "path": "readcv/newcv",
                        "component": "NewcvComponent"
                    },
                    {
                        "path": "readcv/delete/:id",
                        "component": "DeletecvComponent"
                    },
                    {
                        "path": "readuser",
                        "component": "UsercrudComponent"
                    },
                    {
                        "path": "readuser/newuser",
                        "component": "NewuserComponent"
                    },
                    {
                        "path": "readuser/update/:id",
                        "component": "UpdateuserComponent"
                    },
                    {
                        "path": "readuser/delete/:id",
                        "component": "DeleteuserComponent"
                    },
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent"
                    },
                    {
                        "path": "**",
                        "component": "PagenotfoundComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/deletecv/deletecv.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeletecvComponent",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/cv/deletecv/deletecv.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/newcv/newcv.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewcvComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/newcv/newcv.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/readcv/readcv.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadcvComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/readcv/readcv.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/updatecv/update.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cv/updatecv/updatecv.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdatecvComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/deleteuser/deleteuser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteuserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activatedRouteStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/deleteuser/deleteuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/newuser/newuser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewuserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/newuser/newuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/newuser/newuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/readuser/readuser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReaduserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/readuser/readuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/readuser/readuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/updateuser/updateuser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateuserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/updateuser/updateuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activatedRouteStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/updateuser/updateuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/updateuser/updateuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routerStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/updateuser/updateuser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/curriculum.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurriculumModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/skills.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkillsModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/users.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UsersModel",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/curriculo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CurriculoService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/services/skills.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SkillsService",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/template/cvcrud/cvcrud.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CvcrudComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/template/cvcrud/cvcrud.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/footer/footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/template/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/nav/nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/template/usercrud/usercrud.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsercrudComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/template/usercrud/usercrud.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/views/home/home.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/pagenotfound/pagenotfound.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagenotfoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/pagenotfound/pagenotfound.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/views/register/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}